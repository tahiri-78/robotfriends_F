{"version":3,"sources":["Searchbox.js","Carte.js","Carteliste.js","Scrollbarre.js","App.js","serviceWorker.js","index.js"],"names":["Searchbox","searching","this","props","onChange","type","placeholder","Component","Carte","className","alt","src","id","name","email","Carteliste","listcarte","robots","map","ele","i","key","Scrollbarre","children","style","overflow","border","App","searchrobot","event","setState","searchword","target","value","console","log","state","fetch","then","response","json","robotsort","filter","toLowerCase","includes","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oOAgBeA,E,uKAbH,IACAC,EAAcC,KAAKC,MAAnBF,UACR,OACE,6BACE,2BACEG,SAAUH,EACVI,KAAK,SACLC,YAAY,gC,GAREC,aCaTC,E,uKAXX,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BT,KAAKC,MAAMS,GAArC,UACrB,6BACE,4BAAKV,KAAKC,MAAMU,MAChB,2BAAIX,KAAKC,MAAMW,a,GAPLP,aCQLQ,EAPI,SAAC,GAAgB,IAC5BC,EAD2B,EAAbC,OACKC,KAAI,SAACC,EAAKC,GACjC,OAAO,kBAAC,EAAD,CAAOC,IAAKD,EAAGN,MAAOK,EAAIL,MAAOF,GAAIO,EAAIP,GAAIC,KAAMM,EAAIN,UAGhE,OAAO,iCAAOG,EAAP,MCCMM,EAPK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrB,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,oBACvCH,EADH,MC4CWI,G,8DAvCb,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IAeRyB,YAAc,SAACC,GACb,EAAKC,SAAS,CAAEC,WAAYF,EAAMG,OAAOC,QACzCC,QAAQC,IAAI,EAAKC,MAAML,aAhBvB,EAAKK,MAAQ,CACXnB,OAAQ,GACRc,WAAY,IAJG,E,gEAQE,IAAD,OAClBM,MAZc,8CAaXC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACnB,GACL,EAAKW,SAAS,CAAEb,OAAQE,S,+BASpB,IAAD,OACDsB,EAAYvC,KAAKkC,MAAMnB,OAAOyB,QAAO,SAACvB,GAC1C,OAAOA,EAAIN,KACR8B,cACAC,SAAS,EAAKR,MAAML,WAAWY,kBAEpC,OACE,yBAAKlC,UAAU,OACb,yCACA,kBAAC,EAAD,CAAWR,UAAWC,KAAK0B,cAC3B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYX,OAAQwB,U,GAjCZI,IAAMtC,YCIJuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.25798859.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Searchbox extends Component {\r\n  render() {\r\n    const { searching } = this.props;\r\n    return (\r\n      <div>\r\n        <input\r\n          onChange={searching}\r\n          type=\"search\"\r\n          placeholder=\"type your robot's name\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Searchbox;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Carte extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\r\n        <img alt=\"robots\" src={`https://robohash.org/${this.props.id}.png`} />\r\n        <div>\r\n          <h2>{this.props.name}</h2>\r\n          <p>{this.props.email}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Carte;\r\n","import React from \"react\";\r\nimport Carte from \"./Carte\";\r\n\r\nconst Carteliste = ({ robots }) => {\r\n  const listcarte = robots.map((ele, i) => {\r\n    return <Carte key={i} email={ele.email} id={ele.id} name={ele.name} />;\r\n  });\r\n\r\n  return <div> {listcarte} </div>;\r\n};\r\nexport default Carteliste;\r\n","import React, { Component } from \"react\";\r\n\r\nconst Scrollbarre = ({ children }) => {\r\n  return (\r\n    <div style={{ overflow: \"scroll\", border: \"1px solid green\" }}>\r\n      {children};\r\n    </div>\r\n  );\r\n};\r\nexport default Scrollbarre;\r\n","import React from \"react\";\nimport Searchbox from \"./Searchbox\";\nimport Carteliste from \"./Carteliste\";\nimport Scrollbarre from \"./Scrollbarre\";\nimport \"./App.css\";\nimport tachyons from \"tachyons\";\nconst URL_Users = \"https://jsonplaceholder.typicode.com/users\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      robots: [],\n      searchword: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(URL_Users)\n      .then((response) => response.json())\n      .then((ele) => {\n        this.setState({ robots: ele });\n      });\n  }\n\n  searchrobot = (event) => {\n    this.setState({ searchword: event.target.value });\n    console.log(this.state.searchword);\n  };\n\n  render() {\n    const robotsort = this.state.robots.filter((ele) => {\n      return ele.name\n        .toLowerCase()\n        .includes(this.state.searchword.toLowerCase());\n    });\n    return (\n      <div className=\"App\">\n        <h1>My robots</h1>\n        <Searchbox searching={this.searchrobot} />\n        <Scrollbarre>\n          <Carteliste robots={robotsort} />\n        </Scrollbarre>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}